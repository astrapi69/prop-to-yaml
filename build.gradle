buildscript {
    ext.kotlin_version = "1.3.61"
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "java"
    id "maven-publish"
    id "signing"
    id "com.github.ben-manes.versions" version "0.27.0"
    id "com.github.hierynomus.license" version "0.15.0"
    id "org.jetbrains.dokka" version "0.9.17"
}

tasks.dokka {
    outputFormat = "html"
    outputDirectory = "$buildDir/javadoc"
}

apply plugin: "jacoco"
apply plugin: "kotlin"

// workhack for license issue #76
gradle.startParameter.excludedTaskNames += "licenseMain"
gradle.startParameter.excludedTaskNames += "licenseTest"

group "de.alpharogroup"
version "1.1-SNAPSHOT"
sourceCompatibility = 11

repositories {
    mavenCentral()
    mavenCentral()
    jcenter()
}

dependencies {
    compile("org.yaml:snakeyaml:${snakeyamlVersion}")
    compile("de.alpharogroup:silly-collections:${sillyCollectionsVersion}")
    testCompile("de.alpharogroup:file-worker:${fileWorkerVersion}")
    testCompile("org.testng:testng:${testngVersion}")
    testCompile("junit:junit:${junitVersion}")
    testCompile("org.meanbean:meanbean:${meanbeanVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
}

license {
    ext.year="2015"
    ext.owner="Asterios Raptis"
    header rootProject.file("src/main/resources/LICENSE.txt")
    excludes(["**/README",
              "**/README.md",
              "**/LICENSE",
              "**/NOTICE",
              "**/*.xml",
              "**/*.xsl",
              "**/*.xsd",
              "**/*.dtd",
              "**/*.html",
              "**/*.jsp",
              "**/*.jpa",
              "**/*.sql",
              "**/*.properties",
              "**/*.bat",
              "**/*.gradle",
              "**/*.MF",
              "**/*.txt",
              "**/*.vm",
              "**/*.log",
              "**/*.map",
              "**/*.js.map",
              "**/*.tmpl",
              "**/*.js.tmpl",
              "**/*.editorconfig",
              "src/test/resources/**",
              "src/main/resources/**"])
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from(sourceSets.main.allSource)
}

task dokkaJar(type: Jar){
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    description = "Assembles Kotlin docs with Dokka"
    archiveClassifier.set("javadoc")
    // dependsOn(tasks.dokka) not needed; dependency automatically inferred by from(tasks.dokka)
    from(tasks.dokka)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "${rootProject.name}"
            from components.java
            artifact sourcesJar
            artifact dokkaJar
            pom {
                name = "${rootProject.name}"
                description = "Useful extensions and utilities for transform properties to yaml"
                url = "https://github.com/lightblueseas/"+"${rootProject.name}"
                organization {
                    name = "Alpha Ro Group UG (haftungsbeschr√§ngt)"
                    url = "http://www.alpharogroup.de/"
                }
                issueManagement {
                    system = "GitHub"
                    url = "https://github.com/astrapi69/"+"${rootProject.name}"+"/issues"
                }
                licenses {
                    license {
                        name = "Eclipse Public License - v 1.0"
                        url = "https://www.eclipse.org/legal/epl-v10.html"
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        id = "astrapi69"
                        name = "Asterios Raptis"
                    }
                }
                scm {
                    connection = "scm:git:git:@github.com:astrapi69/"+"${rootProject.name}"+".git"
                    developerConnection = "scm:git:git@github.com:astrapi69/"+"${rootProject.name}"+".git"
                    url = "git:@github.com:astrapi69/"+"${rootProject.name}"+".git"
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username System.getenv("ossrhUsername") ?: project.property("ossrhUsername")
                password System.getenv("ossrhPassword") ?: project.property("ossrhPassword")
            }
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

test {
    useTestNG()
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
